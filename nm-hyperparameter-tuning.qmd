---
title: "ESS330: Lab 8 - Hyperparameter Tuning QMD"

author: "Neva Morgan"

date: last-modified

subtitle: "The Whole Game Plan"
---

```{r}
library(tidyverse)
library(tidymodels)
library(glue)
library(dplyr)
library(powerjoin)
library(skimr)
library(visdat)
library(ggpubr)
library(recipes)
library(broom)
```

##Lets return to the CAMELS dataset we have been working with in Lab 6. We will use this dataset to predict the q_mean variable using the other variables in the dataset.

```{r}
#Reading in Data - Data Import/Tidy/Transform

root  <- 'https://gdex.ucar.edu/dataset/camels/file'

types <- c("clim", "geol", "soil", "topo", "vege", "hydro")

remote_files <- glue(
  '{root}/camels_{types}.txt')

local_files <- glue(
  'data/camels_{types}.txt')


walk2(remote_files, local_files, download.file, quiet = TRUE)

camels_8 <- map(local_files, read_delim, show_col_types = FALSE) 

camels_8 <- power_full_join(camels_8 ,by = 'gauge_id')

```

# **Cleaning the data**
```{r}
#| label: Cleaning Data
# 1. Model Prep
camels_8 |> 
  select(aridity, p_mean, q_mean) |> 
  drop_na() |> 
  cor()

vis_dat(camels_8)

vis_miss(camels_8)

camels_8 |> 
  select(aridity, p_mean, q_mean) |> 
  vis_miss()

# 2. Visualizing
ggplot(camels_8, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  scale_color_viridis_c() +
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")


ggplot(camels_8, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 


camels_8 <- camels_8 |>
  mutate(logQmean = log(q_mean))
```

## **Data Splitting**

```{r}
#| label: Data Splitting

set.seed(456)

cam8_split <- initial_split(camels_8, prop = 0.80)

cam8_train <- training(cam8_split)

cam8_test <- testing(cam8_split)

cam8_cv <- vfold_cv(cam8_train, v = 10)

```


## **Feature Engineering**

```{r}
#Building the Recipe

rec_8 <- recipe(logQmean ~ aridity + p_mean, data = cam8_train) %>%
  step_log(all_predictors()) %>%
  step_interact(terms = ~ aridity:p_mean) %>%
  step_novel(all_nominal_predictors()) %>%
  step_unknown(all_nominal_predictors()) %>%
  step_naomit(all_predictors(), all_outcomes())

  
#Baking the data

cam8_baked <- prep(rec_8, cam8_train) |>
  bake(new_data = NULL)

```


## **Resampling and Model Testing**

```{r}
#| label: Building Resamples

# 1. Building Resamples

cam8_cv <- vfold_cv(cam8_train, v = 10)


# 2. Build 3 Candidate Models

## a. Linear Model
lm8_mod <- linear_reg() %>%
  set_engine('lm') %>%
  set_mode("regression")

lm8_wf <- workflow() %>%
  add_recipe(rec_8) %>%
  add_model(lm8_mod) %>%
  fit(data = cam8_train)

## b. Random Forest
rf8_mod <- rand_forest() %>%
  set_engine('ranger') %>%
  set_mode("regression")

rf8_wf <- workflow() %>%
  add_recipe(rec_8) %>%
  add_model(rf8_mod) %>%
  fit(data = cam8_train)

## c. Boost Model
b8_mod <- boost_tree() %>%
  set_engine('xgboost') %>%
  set_mode("regression")

b8_wf <- workflow() %>%
  add_recipe(rec_8) %>%
  add_model(b8_mod) %>%
  fit(data = cam8_train)


# 3. Testing the Models

wf8 <- workflow_set(list(rec_8), list(lm8_mod, rf8_mod, b8_mod)) %>%
  workflow_map('fit_resamples', resamples = cam8_cv)

autoplot(wf8)

rank_results(wf8, rank_metric = "rmse", select_best = TRUE)
#We can see that the random forest model performed better for both mapping the rsq and rmse.Since the random forest model had the lowest RMSE (0.527) and the highest Rsq (0.788) across the 10 resamples, this showed that it would be able to make more accurate predictions than the linear and xgboost models we tested in our workflow set. 

# I selected the model Random Forest, using the 'ranger' engine, and a "regression" mode. The reason this combination of model testers works better for a large dataset like CAMELS is because Random forest handles nonlinearitys and interactions by using my computer's native software. As we have learned in class this Random Forests are also able to handle variable importance predictors, so irrelevant variables have less influence, making it less prone to overfitting.
```

## **Model Tuning**

```{r}
# 1. Build a Model

rf8m_tune <- rand_forest(
  mtry = tune(),
  min_n = tune()
) %>%
  set_engine('ranger') %>%
  set_mode("regression")


# 2. Create a Workflow

rf8wf_tune <- workflow() %>%
  add_recipe(rec_8) %>%
  add_model(rf8m_tune)


# 3. Check the Tunable Values/Ranges

dials <- extract_parameter_set_dials(rf8wf_tune)

print(dials)

params <- dials$object

# 4. Define the Search Space
params <- finalize(params, cam8_train)

my.grid <- grid_latin_hypercube(
  params,
  size = 25
)

# 5. Tune the Model

model_params <-  tune_grid(
    rf8wf_tune,
    resamples = cam8_cv,
    grid = my.grid,
    metrics = metric_set(rmse, rsq, mae),
    control = control_grid(save_pred = TRUE)
  )

autoplot(model_params)
### From this graph I can see that as we increase the randomly selected predictor values: MAE, RMSE, and RSQ all increase in their ability to fit the model to the data better, with 60 being the maximum and best model fit number. We can see that as we use more predictors at each split, this will improve the accruacy overall of the random forest model used on the CAMELS dataset. ALTHOUGH, as we turn our attention towards the Minimal Node size, we can see there isn't a clear trend regarding the data, however, the data appears to be more balanced between 10-20 nodes with a similar trend for MAE, RMSE, and RSQ.


# 6. Check the Skill of the Tuned Model

my_metrics <- metric_set(mae, rmse, rsq)

tuned_results <- tune_grid(
  rf8wf_tune,
  resamples = cam8_cv,
  grid = my.grid,
  metrics = my_metrics,
  control = control_grid(save_pred = TRUE)
)

collect_metrics(tuned_results) %>%
  count(.metric)

print(metrics)


collect_metrics(tuned_results) %>%
  filter(.metric == "rmse") %>%
  arrange(mean)

show_best(tuned_results, metric = "mae", n = 5)
### Based off of the MAE metric, we can see that the best hyperparameter is 21 predictor samples, with the minimum of nodes for trends at 38. Based on the results the minimum nodes has results that range relatively close together, potentially showing that it handles the predictive data to the trained data better between 30-39 nodes.

hp_best <- select_best(
  tuned_results,
  metric = "mae")


# 7. Finalize Your Model

final_rf8_wf <- finalize_workflow(
  rf8wf_tune, 
  hp_best)
```

## **Final Model Verification**

```{r}
# 1. Last Fit

final_rf8_fit <- last_fit(
  final_rf8_wf, split = cam8_split,
  metrics = my_metrics)


# 2. Collecting metrics AGAIN

final_rf8_metfit <- collect_metrics(
  final_rf8_fit)

print(final_rf8_metfit)
### What we can understand from these results is that the final model performance with the test data is most telling in the relationship between MAE and RMSE. While RMSE is higher than MAE, it can tell us that most predictions are close to the actual observed values, but ther are some larger errors brining RMSE's value closer 1 than 0. The Rsq value is also not too alarming, especially for envrionmental data whcih is incredibly variable in variance, 73% of this data falling within the predicted values, is a good value.


# 3. Collecting Predictions

final8_pred <- collect_predictions(
  final_rf8_fit)

head(final8_pred)


# 4. PLOTTING TIME :)

ggplot(final8_pred, aes(x = .pred, y = logQmean)) +
  geom_point(aes(color = .pred), alpha = 0.7) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "black") +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  scale_color_viridis_c() +
  theme_minimal() +
  labs(
    title = "Final Model Predictions vs Actual LogQmean",
    caption = "ESS330 Lab 8 - Neva Morgan",
    x = "Predicted LogQmean",
    y = "Actual LogQmean",
    color = "Predicted"
  )
```

## **Building a Map!**


```{r}
# Fit the final model to ALL DATA

final_rf8_full <- final_rf8_wf %>%
  fit(data = camels_8)


# 1. Predict with augment()
camels_8_aug <- camels_8 %>%
  select(gauge_id, aridity, p_mean, logQmean)

camels8_preds <- augment(
  final_rf8_full, 
  new_data = camels_8_aug)


# 3. Residuals with mutate()

camels8_preds <- camels8_preds %>%
  mutate(
    resid = (logQmean - 
               .pred)^2)


# 4. Building Prediction and Residual Maps

camels8_coords <- read_delim("data/camels_topo.txt", show_col_types = FALSE) %>%
  select(gauge_id, gauge_lat, gauge_lon)

camels8_preds <- camels8_preds %>%
  left_join(camels8_coords, by = "gauge_id")

glimpse(camels8_preds)

#Prediction:
pred8_map <- ggplot(camels8_preds, aes(x = gauge_lon, y = gauge_lat)) +
  geom_point(aes(color = .pred), size = 2, alpha = 0.8) +
  scale_color_viridis_c(option = "C") +
  coord_fixed(1.3) +
  theme_linedraw() +
  labs(title = "Predicted LogQmean", x = "Longitude", y = "Latitude", color = "Prediction")

#Residual:
resid8_map <- ggplot(camels8_preds, aes(x = gauge_lon, y = gauge_lat)) +
  geom_point(aes(color = resid), size = 2, alpha = 0.8) +
  scale_color_viridis_c(option = "A") +
  coord_fixed(1.3) +
  theme_linedraw() +
  labs(title = "Residuals (Squared Error)", x = "Longitude", y = "Latitude", color = "Residual")


# 6. PATCHWORK COMBINING
library(patchwork)

pred8_map + resid8_map +
  plot_annotation(
    title = "CAMELS Predicted and Residuals across CONUS",
    caption = "ESS330 Lab 8 - Neva Morgan"
  )


```

